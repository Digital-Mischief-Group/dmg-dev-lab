---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## AI Coding Assistant Rules

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

This section details the structure and conventions for all project documentation.  All documentation should be clear, concise, and easy to understand.

## TECH STACK

- JavaScript
- TypeScript
- Tailwind CSS
- Bun
- shadcn (latest version)
- Any other libraries or tools used in the project will be added here as needed.


## CODING STANDARDS

- Follow standard JavaScript/TypeScript coding conventions.
- Maintain consistent indentation (e.g., 2 spaces).
- Use descriptive variable and function names.
- Write clear and concise comments.


## WORKFLOW & RELEASE RULES

- All code changes must be reviewed before merging into the main branch.
- Every commit must have a clear and concise message.
- Follow a consistent branching strategy.

## DEBUGGING

When encountering "ENOENT: no such file or directory" errors related to missing CSS files, carefully check the file paths specified in your configuration files (e.g., `components.json`) against the actual file structure.  Ensure there are no typos in filenames (e.g., `global.css` vs `globals.css`).  Also verify that the paths in your configuration files accurately reflect the location of your files.  If the issue persists after correcting file paths and filenames, open an issue on GitHub.


## BEST PRACTICES


- Always double-check file paths and filenames in configuration files to prevent "ENOENT" errors.
- Regularly review and update the `components.json` file to reflect the actual project file structure.


## VERSION CONTROL

- All code should be version-controlled using Git.
- Commit messages should be clear, concise, and descriptive.
- Use a consistent branching strategy (e.g., Gitflow).